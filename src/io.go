package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {

	// Declare a variable of type string
	var inputVar string

	// 1. Read using fmt's scanf func

	// fmt's print func, print the arguments on stdout
	fmt.Print("Enter the input variable : ")
	// it scans text read from standard input, storing successive space-separated values into successive arguments.
	// It returns the number of items successfully scanned. The entered value is stored in variable inputVar here
	fmt.Scanf("%s", &inputVar)
	// fmt's println function, print arguments on stdout with newline
	fmt.Println("Entered input is :", inputVar)

	// 2. Read using bufio's NewReader function

	fmt.Print("Enter the input variable: ")
	// Buffered I/O has much better performance than non-buffered.
	// it reads argument from the input using bufio.NewReader
	// We pass the standard input to the bufio.NewReader.
	reader := bufio.NewReader(os.Stdin)
	// The ReadString reads until the first occurrence of the specified delimiter (new-line in our case) in the input,
	// returning a string containing the data up to and including the delimiter.
	inputVar, _ = reader.ReadString('\n')
	// fmt's printf func uses formatting specifier for printing arguments
	fmt.Printf("Entered input is : %s\n", inputVar)

	// 3. Read using bufio's NewScanner function
  
	fmt.Print("Enter the input variable: ")
	// it scan argument from the input using bufio.NewScanner
	// We pass the standard input to the bufio.NewScanner.
	scanner := bufio.NewScanner(os.Stdin)
	// We read a line from standard input.
	// The Scan advances the Scanner to the next token, which will then be available through the Bytes or Text function.
	scanner.Scan()
	// The Text returns the most recent token generated by a call to Scan as a string holding its bytes.
	inputVar = scanner.Text()
	fmt.Println("Entered input is :", inputVar)
}
